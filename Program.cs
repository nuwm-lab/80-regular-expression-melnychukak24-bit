using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;

namespace RegularExpressionExample
{
    /// <summary>
    /// –ö–ª–∞—Å –¥–ª—è –ø–æ—à—É–∫—É —à–∞–±–ª–æ–Ω—ñ–≤ —É —Ç–µ–∫—Å—Ç—ñ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ä–µ–≥—É–ª—è—Ä–Ω–∏—Ö –≤–∏—Ä–∞–∑—ñ–≤.
    /// </summary>
    public static class TextPatternFinder
    {
        // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è —à–∞–±–ª–æ–Ω—É –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        private const string ImageUrlPattern =
            @"https?:\/\/[^\s\)\]\>\""',;]+?\.(jpg|png|gif)(?=$|\s|[\)\]\>\""',;:?!])";

        /// <summary>
        /// –í–∏–∫–æ–Ω—É—î –ø–æ—à—É–∫ –∑–±—ñ–≥—ñ–≤ —É —Ç–µ–∫—Å—Ç—ñ –∑–∞ –∑–∞–¥–∞–Ω–∏–º —à–∞–±–ª–æ–Ω–æ–º.
        /// </summary>
        /// <param name="text">–í—Ö—ñ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç.</param>
        /// <param name="pattern">–†–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑.</param>
        /// <param name="options">–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ Regex (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º IgnoreCase + Compiled).</param>
        /// <returns>–ö–æ–ª–µ–∫—Ü—ñ—è –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –∑–±—ñ–≥—ñ–≤.</returns>
        public static MatchCollection SearchWithRegex(string text, string pattern, 
            RegexOptions options = RegexOptions.IgnoreCase | RegexOptions.Compiled)
        {
            if (string.IsNullOrWhiteSpace(text))
                throw new ArgumentException("–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.", nameof(text));

            try
            {
                Regex regex = new Regex(pattern, options);
                return regex.Matches(text);
            }
            catch (ArgumentException ex)
            {
                Console.WriteLine($"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —à–∞–±–ª–æ–Ω—ñ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤–∏—Ä–∞–∑—É: {ex.Message}");
                return MatchCollection.Empty;
            }
        }

        /// <summary>
        /// –ó–Ω–∞—Ö–æ–¥–∏—Ç—å —É—Å—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ .jpg, .png –∞–±–æ .gif.
        /// </summary>
        /// <param name="text">–í—Ö—ñ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç.</param>
        /// <returns>–°–ø–∏—Å–æ–∫ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å.</returns>
        public static List<string> FindImageLinks(string text)
        {
            List<string> results = new();

            foreach (Match match in SearchWithRegex(text, ImageUrlPattern))
                results.Add(match.Value);

            return results;
        }
    }

    class Program
    {
        static void Main()
        {
            string text = "–ü—Ä–∏–∫–ª–∞–¥–∏: https://example.com/img/photo.jpg, http://site.net/pic.png?ver=2, " +
                          "—ñ –Ω–∞–≤—ñ—Ç—å https://host.com/gif/image.gif.";

            try
            {
                var links = TextPatternFinder.FindImageLinks(text);

                if (links.Count > 0)
                {
                    Console.WriteLine("üîç –ó–Ω–∞–π–¥–µ–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:");
                    foreach (var link in links)
                        Console.WriteLine(link);
                }
                else
                {
                    Console.WriteLine("‚ùå –ü–æ—Å–∏–ª–∞–Ω—å –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {ex.Message}");
            }
        }
    }
}
