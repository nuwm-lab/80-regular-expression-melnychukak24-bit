using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;

namespace RegularExpressionExample
{
    class Program
    {
        // === 1Ô∏è‚É£ –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —à–∞–±–ª–æ–Ω—ñ–≤ ===
        // –£—Å—ñ –ø–∞—Ç–µ—Ä–Ω–∏ –∑—ñ–±—Ä–∞–Ω—ñ –≤ —Å–ª–æ–≤–Ω–∏–∫: –∫–ª—é—á ‚Äî –Ω–∞–∑–≤–∞ —Ç–∏–ø—É, –∑–Ω–∞—á–µ–Ω–Ω—è ‚Äî Regex
        private static readonly Dictionary<string, Regex> Patterns = new Dictionary<string, Regex>
        {
            // –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è (jpg, png, gif, svg, webp)
            ["Images"] = new Regex(
                @"https?:\/\/[^\s""'<>]+?\.(jpg|png|gif|svg|webp)\b(?:[?#][^\s""'<>]*)?",
                RegexOptions.IgnoreCase | RegexOptions.Compiled),

            // –ó–≤–∏—á–∞–π–Ω—ñ URL (–±—É–¥—å-—è–∫—ñ —Å–∞–π—Ç–∏, –Ω–∞–≤—ñ—Ç—å –±–µ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω—å)
            ["URLs"] = new Regex(
                @"https?:\/\/[^\s""'<>]+",
                RegexOptions.IgnoreCase | RegexOptions.Compiled),

            // –î–∞—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ dd.mm.yyyy –∞–±–æ dd/mm/yyyy
            ["Dates"] = new Regex(
                @"\b\d{1,2}[./]\d{1,2}[./]\d{2,4}\b",
                RegexOptions.Compiled),

            // IPv4-–∞–¥—Ä–µ—Å–∏
            ["IP Addresses"] = new Regex(
                @"\b(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\b",
                RegexOptions.Compiled)
        };

        static void Main(string[] args)
        {
            string text = @"
                –û—Å—å –ø—Ä–∏–∫–ª–∞–¥–∏ –¥–∞–Ω–∏—Ö:
                - –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è: https://example.com/photo.jpg
                - –©–µ –æ–¥–Ω–µ: http://images.site.org/pic.webp?ver=2
                - –ó–≤–∏—á–∞–π–Ω–∏–π —Å–∞–π—Ç: https://mysite.ua/page?id=10
                - –î–∞—Ç–∞: 21.10.2025
                - IP: 192.168.1.1
                - –©–µ IP: 8.8.8.8
            ";

            // === 2Ô∏è‚É£ –ü–æ—à—É–∫ —ñ –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ ===
            var results = FindAllPatterns(text);

            // === 3Ô∏è‚É£ –í–∏–≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ ===
            Console.WriteLine("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É:\n");

            foreach (var kvp in results)
            {
                string patternName = kvp.Key;
                List<string> foundItems = kvp.Value;

                Console.WriteLine($"üü© {patternName} ({foundItems.Count} –∑–Ω–∞–π–¥–µ–Ω–æ):");

                if (foundItems.Count > 0)
                {
                    foreach (var item in foundItems)
                        Console.WriteLine("   ‚Ä¢ " + item);
                }
                else
                {
                    Console.WriteLine("   ‚Äî –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
                }

                Console.WriteLine();
            }

            // === 4Ô∏è‚É£ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===
            Console.WriteLine("üìä –ü—ñ–¥—Å—É–º–æ–∫:");
            foreach (var kvp in results)
            {
                Console.WriteLine($"   {kvp.Key}: {kvp.Value.Count}");
            }
        }

        /// <summary>
        /// –ó–¥—ñ–π—Å–Ω—é—î –ø–æ—à—É–∫ —É—Å—ñ—Ö –∑–±—ñ–≥—ñ–≤ –¥–ª—è –≤—Å—ñ—Ö —à–∞–±–ª–æ–Ω—ñ–≤ –æ–¥–Ω–æ—á–∞—Å–Ω–æ.
        /// </summary>
        private static Dictionary<string, List<string>> FindAllPatterns(string input)
        {
            var output = new Dictionary<string, List<string>>();

            foreach (var kvp in Patterns)
            {
                string name = kvp.Key;
                Regex regex = kvp.Value;

                var matches = regex.Matches(input);
                var list = new List<string>();

                foreach (Match match in matches)
                {
                    string value = match.Value.Trim();

                    // –î–æ–¥–∞—î–º–æ –ª–∏—à–µ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
                    if (!list.Contains(value))
                        list.Add(value);
                }

                output[name] = list;
            }

            return output;
        }
    }
}
